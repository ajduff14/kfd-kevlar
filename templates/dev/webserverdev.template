---
AWSTemplateFormatVersion: '2010-09-09'
Description: Magento 2.1 Web Server Template
Parameters:
  AdminEmail:
    Description: Email of the Magento site administrator
    Type: String
  AdminFirstName:
    Description: First Name of the Magento site administrator
    Type: String
  AdminLastName:
    Description: Last Name of the Magento site administrator
    Type: String
  AdminPassword:
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Description: Password of the Magento site administrator
    MaxLength: '32'
    MinLength: '8'
    NoEcho: 'True'
    Type: String
  AdminUserName:
    Description: Username of the Magento site administrator
    Type: String
  DBMasterUserPassword:
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Description: RDS MySQL Database Password
    NoEcho: 'True'
    Type: String
  DBMasterUsername:
    Default: admin
    Description: RDS MySQL Database Username
    Type: String
  DBName:
    Default: ''
    Description: RDS MySQL Database Name
    Type: String
  DNSName:
    Default: ''
    Description: DNS Name for the magento site, you should create an alias for the
      ELB after the stack creation
    Type: String
  KeyPair:
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  MagentoCurrency:
    Default: EUR
    Description: Magento Currency
    Type: String
  MagentoLanguage:
    Default: en_US
    Description: Magento Language
    Type: String
  MagentoTimezone:
    Default: Europe/Lisbon
    Description: Magento Timezone
    Type: String
  MagentoReleaseMedia:
    Default: ''
    Description: Amazon S3 path to download magento .tar.gz file (https://s3.amazonaws.com/mybucket/Magento-CE-2.1.9_sample_data-2017-09-13-03-57-21.tar.gz)
    Type: String
  MySQLEndPointAddress:
    Default: ''
    Description: RDS MySQL Endpoint
    Type: String
  NotificationEmail:
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: Must be a valid email address.
    Description: Email address to notify if there are any scaling operations
    Type: String
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-magento/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  WebServerInstanceType:
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    ConstraintDescription: Choose an instance type.
    Default: m4.large
    Description: Web Server node instance type
    Type: String
  WebServerSecurityGroup:
    Description: Web Server Security Group
    Type: AWS::EC2::SecurityGroup::Id
Mappings:
  AWSAMIRegionMap:
    AMI:
      AMZNLINUXHVM: amzn-ami-hvm-2018.03.0.20180622-x86_64-gp2
    ap-northeast-1:
      AMZNLINUXHVM: ami-9c9443e3
    ap-northeast-2:
      AMZNLINUXHVM: ami-ebc47185
    ap-south-1:
      AMZNLINUXHVM: ami-5a8da735
    ap-southeast-1:
      AMZNLINUXHVM: ami-ed838091
    ap-southeast-2:
      AMZNLINUXHVM: ami-33f92051
    ca-central-1:
      AMZNLINUXHVM: ami-03e86a67
    eu-central-1:
      AMZNLINUXHVM: ami-a058674b
    eu-west-1:
      AMZNLINUXHVM: ami-e4515e0e
    eu-west-2:
      AMZNLINUXHVM: ami-b2b55cd5
    sa-east-1:
      AMZNLINUXHVM: ami-83d58fef
    us-east-1:
      AMZNLINUXHVM: ami-cfe4b2b0
    us-east-2:
      AMZNLINUXHVM: ami-40142d25
    us-west-1:
      AMZNLINUXHVM: ami-0e86606d
    us-west-2:
      AMZNLINUXHVM: ami-0ad99772
Resources:
  MagentoMainLogGroup:
    Type: AWS::Logs::LogGroup
  NewIamInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${MagentoMainLogGroup}:*
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource: '*'
        PolicyName: Instance-Limited-Role
  NewIamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref NewIamInstanceRole
  MagentoAMIWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  MagentoAMIWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: MagentoAMI
    Properties:
      Handle: !Ref MagentoAMIWaitHandle
      Timeout: '300'
  MagentoAMI:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install a Magento web server
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref NewIamInstanceRole
      AWS::CloudFormation::Init:
        config:
          files:
            /install_magento.sh:
              source: https://s3.amazonaws.com/deployment.kingfisherdirect/bb-cloudformation-templates/scripts/dev/install_magento.sh
              mode: '000744'
              owner: root
              group: root
              authentication: S3AccessCreds
            /configure_magento.sh:
              source: https://s3.amazonaws.com/deployment.kingfisherdirect/bb-cloudformation-templates/scripts/dev/configure_magento.sh
              mode: '000744'
              owner: root
              group: root
              authentication: S3AccessCreds
            /home/ubuntu/magento.tar.gz:
              source: !Ref MagentoReleaseMedia
              mode: '000644'
              owner: root
              group: root
              authentication: S3AccessCreds
            /tmp/params.txt:
              content: 
                !Sub 
                - |
                  MySQLEndPointAddress|${MySQLEndPointAddress}
                  DBMasterUsername|${DBMasterUsername}
                  DBMasterUserPassword|${DBMasterUserPassword}
                  DBName|${DBName}
                  DNSName|${Param1}
                  AdminFirstName|${AdminFirstName}
                  AdminLastName|${AdminLastName}
                  AdminEmail|${AdminEmail}
                  AdminUserName|${AdminUserName}
                  AdminPassword|${AdminPassword}
                  MagentoReleaseMedia|${MagentoReleaseMedia}
                  MagentoLanguage|${MagentoLanguage}
                  MagentoCurrency|${MagentoCurrency}
                  MagentoTimezone|${MagentoTimezone}
                - Param1:
                    - !GetAtt MagentoAMI.PublicIP
              mode: '000440'
              owner: root
              group: root
    Properties:
      KeyName: !Ref KeyPair
      IamInstanceProfile: !Ref NewIamInstanceProfile
      ImageId: ami-08d658f84a6d84a80
      InstanceType: !Ref WebServerInstanceType
      SecurityGroupIds:
      - !Ref WebServerSecurityGroup
      UserData:
        !Base64
          Fn::Sub: |
            #!/bin/bash
            set -x

            apt -y update
            apt -y upgrade

            apt -y install python-setuptools python-pip
            curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz -O
            tar xzfa aws-cfn-bootstrap-latest.tar.gz
            mkdir -p /opt/aws/bin

            python /usr/lib/python2.7/dist-packages/easy_install.py \
              --script-dir /opt/aws/bin \
              aws-cfn-bootstrap-1.4

            /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource MagentoAMI --region ${AWS::Region}

            ./install_magento.sh /tmp/params.txt

            # /opt/aws/bin/cfn-signal -e $? -d "`cat /home/ubuntu/adminuri`" -r "Build Process Complete" '${MagentoAMIWaitHandle}'
      Tags:
      - Key: Application
        Value: AWS Quick Start (Magento)
      - Key: Name
        Value: MagentoAMI (AWS Quick Start)
  AMIInfoFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:Describe*
            - ec2:StopInstances
            - ec2:CreateImage
            - ec2:DeregisterImage
            Resource: '*'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  AMIInfoFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python2.7
      Timeout: '300'
      Role: !GetAtt AMIInfoFunctionExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import cfnresponse
          import boto3
          from random import randint
          def lambda_handler(event, context):
            if event['RequestType'] == 'Delete':
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              return
            try:
              ec2 = boto3.resource('ec2')
              instance = ec2.Instance(event['ResourceProperties']['InstanceId'])
              instance.stop()
              instance.wait_until_stopped()
              image = instance.create_image(Name="%s-%i" % (event['ResourceProperties']['AMIName'], randint(0,100000)), Description="Created with Cloudformation")
              boto3.client('ec2').get_waiter('image_available').wait(ImageIds=[image.id])
              responseData = {'ami':image.id}
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            except Exception as inst:
              print(inst)
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
  AMICleanUpFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python2.7
      Timeout: '300'
      Role: !GetAtt AMIInfoFunctionExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import cfnresponse
          import boto3
          from random import randint
          def lambda_handler(event, context):
            if event['RequestType'] == 'Delete':
              try:
                ec2 = boto3.resource('ec2')
                image = ec2.Image(event['ResourceProperties']['AMIId'])
                image.deregister()
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as inst:
                print(inst)
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
            else:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
  CreateAMI:
    Type: Custom::CreateAMI
    DeletionPolicy: Retain
    DependsOn: MagentoAMIWaitCondition
    # DependsOn: MagentoAMI
    Properties:
      ServiceToken: !GetAtt AMIInfoFunction.Arn
      InstanceId: !Ref MagentoAMI
      AMIName: MagentoAMI
      Version: 1
  CleanUpAMI:
    Type: Custom::CleanUpAMI
    Properties:
      ServiceToken: !GetAtt AMICleanUpFunction.Arn
      AMIId: !GetAtt CreateAMI.ami
      Version: 1
  # NotificationTopic:
  #   Type: AWS::SNS::Topic
  #   Properties:
  #     Subscription:
  #     - Endpoint: !Ref NotificationEmail
  #       Protocol: email
Outputs:
  AdminURL:
    Description: Admin path
    Value:
      !Select
      - '0'
      - !Split
        - '"'
        - !Select
          - '2'
          - !Split
            - ':'
            - !GetAtt MagentoAMIWaitCondition.Data
...
